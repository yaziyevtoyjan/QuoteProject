{"version":3,"file":"static/js/144.5992d7fd.chunk.js","mappings":"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","sources":["components/hooks/use-http.js","components/lib/api.js","webpack://react-complete-guide/./src/components/quotes/QuoteItem.module.css?127c","components/quotes/QuoteItem.js","webpack://react-complete-guide/./src/components/quotes/QuoteList.module.css?9d5d","components/quotes/QuoteList.js","webpack://react-complete-guide/./src/components/quotes/NoQuotesFound.module.css?2c4b","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://quotes-35d3e-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"QuoteItem_item__GIrSl\"};","import { Link } from 'react-router-dom/cjs/react-router-dom.min';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className=\"btn\" to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"QuoteList_list__Y2mNT\",\"sorting\":\"QuoteList_sorting__T1CQ-\"};","import { Fragment } from \"react\";\nimport {\n  useHistory,\n  useLocation,\n} from \"react-router-dom/cjs/react-router-dom.min\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${(isSortingAscending ? \"desc\" : \"asc\")}`,\n    });\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","// extracted by mini-css-extract-plugin\nexport default {\"noquotes\":\"NoQuotesFound_noquotes__fysSk\"};","import classes from './NoQuotesFound.module.css';\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import React, { useEffect } from \"react\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport useHttp from \"../components/hooks/use-http\";\r\nimport { getAllQuotes } from \"../components/lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\n\r\nconst AllQuotes = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getAllQuotes, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n    return <NoQuotesFound />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <QuoteList quotes={loadedQuotes} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllQuotes;\r\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","arguments","length","undefined","httpState","dispatch","useReducer","sendRequest","useCallback","async","requestData","message","FIREBASE_DOMAIN","getAllQuotes","response","fetch","concat","json","ok","Error","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","_jsxs","className","classes","children","_jsx","text","author","Link","to","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","quotes","ascending","sort","quoteA","quoteB","sortQuotes","Fragment","onClick","changeSortingHandler","pathname","map","quote","QuoteItem","NoQuotesFound","AllQuotes","loadedQuotes","useHttp","useEffect","LoadingSpinner","QuoteList"],"sourceRoot":""}