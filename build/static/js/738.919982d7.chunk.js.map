{"version":3,"file":"static/js/738.919982d7.chunk.js","mappings":"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","sources":["components/hooks/use-http.js","components/lib/api.js","webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://quotes-35d3e-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__eOv51\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__63Hj0\",\"loading\":\"QuoteForm_loading__ursHd\",\"control\":\"QuoteForm_control__ngcaR\",\"actions\":\"QuoteForm_actions__KNCAo\"};","import { Fragment, useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom/cjs/react-router-dom.min\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n  const finishEnteringHandler = () =>{\n    setIsEntering(false)\n  }\n\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  };\n\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          \"Are you sure you want to leave? All your entered data will be lost!\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className=\"btn\">Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import React, { useEffect } from \"react\";\r\n\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from \"../components/hooks/use-http\";\r\nimport { addQuote } from \"../components/lib/api\";\r\n\r\nconst NewQuote = () => {\r\n  const { sendRequest, status} = useHttp(addQuote);\r\n  const history = useHistory();\r\n\r\n  useEffect(()=>{\r\n    if(status === 'completed'){\r\n        history.push('/quotes');\r\n    }\r\n  },[status, history])\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n  };\r\n  return (\r\n    <div>\r\n      <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewQuote;\r\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","arguments","length","undefined","httpState","dispatch","useReducer","sendRequest","useCallback","async","requestData","message","FIREBASE_DOMAIN","getAllQuotes","response","fetch","concat","json","ok","Error","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","_jsx","className","classes","children","isEntering","setIsEntering","useState","authorInputRef","useRef","textInputRef","_jsxs","Fragment","Prompt","when","location","Card","onFocus","formFocusedHandler","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","ref","rows","onClick","finishEnteringHandler","NewQuote","useHttp","history","useHistory","useEffect","QuoteForm"],"sourceRoot":""}