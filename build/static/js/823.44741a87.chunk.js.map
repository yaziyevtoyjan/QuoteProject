{"version":3,"file":"static/js/823.44741a87.chunk.js","mappings":"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","sources":["components/hooks/use-http.js","components/lib/api.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://quotes-35d3e-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__qHDbt\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__ItviR\",\"loading\":\"NewCommentForm_loading__BBArf\",\"control\":\"NewCommentForm_control__5k+Wh\",\"actions\":\"NewCommentForm_actions__3BzpP\"};","import { useRef, useEffect } from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../hooks/use-http';\nimport { addComment } from '../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest, status, error} = useHttp(addComment);\n\n  const {onAddedComment} = props;\n\n  useEffect(()=>{\n    if(status === 'completed' && !error){\n      onAddedComment();\n    }\n  },[status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    sendRequest({commentData: {text: enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner/>\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__f0hY9\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__My6xy\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport { useParams } from \"react-router-dom/cjs/react-router-dom.min\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllComments } from \"../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  },[sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__mITvf\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { Fragment, useEffect } from \"react\";\r\nimport {\r\n  Link,\r\n  Route,\r\n  useParams,\r\n  useRouteMatch,\r\n} from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../components/hooks/use-http\";\r\nimport { getSingleQuote } from \"../components/lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const {quoteId} = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n useEffect(()=>{\r\n    sendRequest(quoteId);\r\n },[sendRequest, quoteId])\r\n\r\n if(status ==='pending'){\r\n    return(\r\n        <div className=\"centered\">\r\n            <LoadingSpinner/>\r\n        </div>\r\n    )\r\n }\r\n\r\n if (error){\r\n    return <p className=\"centered\">{error}</p>\r\n }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Fragment>\r\n        <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n        <Route path={match.path} exact>\r\n          <div className=\"centered\">\r\n            <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n              Load Comments\r\n            </Link>\r\n          </div>\r\n        </Route>\r\n        <Route path={`${match.path}/comments`}>\r\n          <Comments />\r\n        </Route>\r\n      </Fragment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","arguments","length","undefined","httpState","dispatch","useReducer","sendRequest","useCallback","async","requestData","message","FIREBASE_DOMAIN","getAllQuotes","response","fetch","concat","json","ok","Error","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","commentTextRef","useRef","useHttp","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","text","_jsxs","className","classes","onSubmit","children","_jsx","LoadingSpinner","htmlFor","rows","ref","comments","map","comment","CommentItem","Comments","isAddingComment","setIsAddingComment","useState","params","useParams","loadedComments","addedCommentHandler","CommentsList","onClick","startAddCommentHandler","NewCommentForm","author","QuoteDetail","match","useRouteMatch","loadedQuote","Fragment","HighlightedQuote","Route","path","exact","Link","to","url"],"sourceRoot":""}